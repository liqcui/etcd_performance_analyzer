Metadata-Version: 2.4
Name: ocp-etcd-analyzer-mcp
Version: 1.0.0
Summary: MCP Server for OpenShift etcd cluster monitoring and analysis
Author-email: OpenShift etcd Analyzer <admin@example.com>
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: asyncio>=3.4.1
Requires-Dist: fastapi>=0.115.7
Requires-Dist: fastmcp>=1.12.4
Requires-Dist: langgraph>=0.3
Requires-Dist: langchain>=0.3
Requires-Dist: kubernetes>=29.0.0
Requires-Dist: prometheus-api-client>=0.5.3
Requires-Dist: requests>=2.31.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyyaml>=6.0.1
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: uvicorn>=0.20.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: pytz>=2023.3
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"

# OpenShift etcd Analyzer MCP Server

A Model Context Protocol (MCP) server for monitoring and analyzing OpenShift etcd clusters through Prometheus metrics and Kubernetes API integration.

## Features

- **OpenShift Authentication**: Automatic connection via KUBECONFIG
- **Prometheus Integration**: Query etcd metrics using PromQL
- **etcd Cluster Status**: Real-time cluster health monitoring
- **Comprehensive Metrics**: CPU, memory, disk, network, and performance metrics
- **Time Series Analysis**: Query historical data with time ranges
- **JSON Output**: Structured data for easy integration

## Architecture

```
ocp-benchmark-mcp/
├── README.md
├── pyproject.toml
├── ocp_etcd_analyzer_mcp_server.py     # Main MCP server
├── ocp_etcd_analyzer_client_chat.py    # Client interface
├── ocp_etcd_analyzer_command.sh        # Launch script
├── ocauth/
│   └── ocp_auth.py                     # OpenShift authentication
├── tools/
│   ├── etcd_cluster_status.py          # Cluster status collector
│   ├── etcd_general_info.py            # General info collector
│   ├── etcd_disk_compact_defrag.py     # Disk compaction metrics
│   ├── etcd_disk_wal_fsync.py          # WAL fsync metrics
│   ├── etcd_disk_backend_commit.py     # Backend commit metrics
│   ├── etcd_network_io.py              # Network I/O metrics
│   ├── etcd_disk_io.py                 # Disk I/O metrics
│   └── ocp_prometheus_basequery.py     # Prometheus query utilities
└── config/
    ├── etcd_config.py                  # Configuration management
    └── metrics-etcd.yml                # Prometheus metrics definitions
```

## Installation

1. **Prerequisites**:
   - Python 3.8+
   - Access to OpenShift cluster with KUBECONFIG
   - etcd monitoring enabled in OpenShift

2. **Install dependencies**:
   ```bash
   pip install -e .
   ```

3. **Set up environment**:
   ```bash
   export KUBECONFIG=/path/to/your/kubeconfig
   export TZ=UTC
   ```

## Usage

### Starting the MCP Server

```bash
# Using the launch script
./ocp_etcd_analyzer_command.sh

# Or directly
python ocp_etcd_analyzer_mcp_server.py
```

### Using the Client

```bash
python ocp_etcd_analyzer_client_chat.py
```

## Available Tools

### 1. etcd Cluster Status
- **Function**: `get_etcd_cluster_status`
- **Description**: Retrieves etcd cluster endpoint status
- **Returns**: Cluster health, member status, and leadership information

### 2. General Info Metrics
- **Function**: `get_etcd_general_info`
- **Description**: CPU, memory, database size, and operational metrics
- **Parameters**: `duration` (time range for queries)

### 3. Disk Compact/Defrag Metrics
- **Function**: `get_etcd_disk_compact_defrag`
- **Description**: Database compaction and defragmentation performance
- **Parameters**: `duration` (time range for queries)

### 4. WAL Fsync Metrics
- **Function**: `get_etcd_disk_wal_fsync`
- **Description**: Write-Ahead Log fsync performance
- **Parameters**: `duration` (time range for queries)

### 5. Backend Commit Metrics
- **Function**: `get_etcd_disk_backend_commit`
- **Description**: Backend commit operation performance
- **Parameters**: `duration` (time range for queries)

### 6. Network I/O Metrics
- **Function**: `get_etcd_network_io`
- **Description**: Network traffic and peer communication metrics
- **Parameters**: `duration` (time range for queries)

### 7. Disk I/O Metrics
- **Function**: `get_etcd_disk_io`
- **Description**: Disk read/write throughput and IOPS
- **Parameters**: `duration` (time range for queries)

## Configuration

The `config/metrics-etcd.yml` file contains all PromQL queries organized by category:

- `general_info`: Basic cluster metrics
- `disk_compact_defrag`: Compaction and defragmentation
- `disk_wal_fsync`: WAL fsync operations
- `disk_backend_commit`: Backend commit operations
- `network_io`: Network traffic and latency
- `disk_io`: Disk I/O performance

## Authentication

The server automatically discovers the Prometheus endpoint through:

1. Reading KUBECONFIG for cluster access
2. Finding the monitoring namespace
3. Locating Prometheus service
4. Using service account tokens for authentication

## Time Zone

All queries are executed in UTC timezone for consistency across deployments.

## Development

### Running Tests

```bash
pip install -e ".[dev]"
pytest
```

### Code Formatting

```bash
black .
flake8 .
mypy .
```

## Troubleshooting

1. **Authentication Issues**: Ensure KUBECONFIG is properly set and has necessary permissions
2. **Prometheus Access**: Verify monitoring is enabled and accessible
3. **Metrics Missing**: Check that etcd monitoring is configured in OpenShift

## License

MIT License - see LICENSE file for details.
